/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.registry.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// Chart is a chart in chart group of chartmuseum registry.
message Chart {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of chart in this set.
  // +optional
  optional ChartSpec spec = 2;

  // +optional
  optional ChartStatus status = 3;
}

// ChartGroup is a chart container in chartmuseum registry.
message ChartGroup {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of chart group in this set.
  // +optional
  optional ChartGroupSpec spec = 2;

  // +optional
  optional ChartGroupStatus status = 3;
}

// ChartGroupList is the whole list of all chart groups which owned by a tenant.
message ChartGroupList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of chart groups
  repeated ChartGroup items = 2;
}

// ChartGroupSpec is a description of a chart group.
message ChartGroupSpec {
  optional string name = 1;

  optional string tenantID = 2;

  // +optional
  optional string displayName = 3;

  // +optional
  optional string visibility = 4;

  // +optional
  optional string type = 5;

  // +optional
  optional string description = 6;

  // +optional
  repeated string projects = 7;

  // +optional
  repeated string finalizers = 8;
}

// ChartGroupStatus represents information about the status of a chart group.
message ChartGroupStatus {
  // +optional
  optional bool locked = 1;

  optional int32 chartCount = 2;

  // +optional
  optional string phase = 3;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 6;
}

// ChartInfo describes detail of a chart version.
message ChartInfo {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of a chart.
  // +optional
  optional ChartInfoSpec spec = 2;
}

// ChartInfoSpec is a description of a ChartInfo.
message ChartInfoSpec {
  // +optional
  map<string, string> readme = 1;

  // +optional
  map<string, string> values = 2;

  // +optional
  map<string, string> rawFiles = 3;

  // +optional
  optional ChartSpec chartSpec = 4;

  // +optional
  optional ChartVersion chartVersion = 5;
}

// ChartList is the whole list of all charts which owned by a chart group.
message ChartList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of charts
  repeated Chart items = 2;
}

// ChartProxyOptions is the query options to a ChartInfo proxy call.
message ChartProxyOptions {
  // +optional
  optional string version = 1;

  // +optional
  optional string cluster = 2;

  // +optional
  optional string namespace = 3;
}

message ChartSpec {
  optional string name = 1;

  optional string tenantID = 2;

  optional string chartGroupName = 3;

  // +optional
  optional string displayName = 4;

  // +optional
  optional string visibility = 5;

  // +optional
  repeated string finalizers = 6;
}

message ChartStatus {
  // +optional
  optional bool locked = 1;

  optional int32 pullCount = 2;

  repeated ChartVersion versions = 3;

  // +optional
  optional string phase = 4;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 6;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 7;
}

message ChartVersion {
  optional string version = 1;

  optional int64 chartSize = 2;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time timeCreated = 3;

  optional string description = 4;

  optional string appVersion = 5;

  optional string icon = 6;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// Namespace is an image container in registry.
message Namespace {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of namespace in this set.
  // +optional
  optional NamespaceSpec spec = 2;

  // +optional
  optional NamespaceStatus status = 3;
}

// NamespaceList is the whole list of all namespaces which owned by a tenant.
message NamespaceList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of namespaces
  repeated Namespace items = 2;
}

// NamespaceSpec is a description of a namespace.
message NamespaceSpec {
  optional string name = 1;

  optional string tenantID = 2;

  // +optional
  optional string displayName = 3;

  // +optional
  optional string visibility = 4;
}

// NamespaceStatus represents information about the status of a namespace.
message NamespaceStatus {
  // +optional
  optional bool locked = 1;

  optional int32 repoCount = 2;
}

// Repository is a repo in namespace of registry.
message Repository {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of repository in this set.
  // +optional
  optional RepositorySpec spec = 2;

  // +optional
  optional RepositoryStatus status = 3;
}

// RepositoryList is the whole list of all repositories which owned by a namespace.
message RepositoryList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of repositories
  repeated Repository items = 2;
}

message RepositorySpec {
  optional string name = 1;

  optional string tenantID = 2;

  optional string namespaceName = 3;

  // +optional
  optional string displayName = 4;

  // +optional
  optional string visibility = 5;
}

message RepositoryStatus {
  // +optional
  optional bool locked = 1;

  optional int32 pullCount = 2;

  repeated RepositoryTag tags = 3;
}

message RepositoryTag {
  optional string name = 1;

  optional string digest = 2;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time timeCreated = 3;
}

