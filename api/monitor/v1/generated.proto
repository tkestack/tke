/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.monitor.v1;

import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ClusterOverview defines the structure for querying clusters' overview data request and result.
message ClusterOverview {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional ClusterOverviewResult result = 2;
}

message ClusterOverviewResult {
  optional int32 clusterCount = 1;

  optional int32 clusterAbnormal = 2;

  optional int32 projectCount = 3;

  optional int32 projectAbnormal = 4;

  optional int32 nodeCount = 5;

  optional int32 nodeAbnormal = 6;

  optional int32 workloadCount = 7;

  optional int32 workloadAbnormal = 8;

  optional double cpuCapacity = 9;

  optional double cpuAllocatable = 10;

  optional int64 memCapacity = 11;

  optional int64 memAllocatable = 12;

  optional int32 podCount = 13;

  repeated ClusterStatistic clusters = 14;
}

message ClusterStatistic {
  optional string clusterID = 1;

  optional string tenantID = 2;

  optional string clusterPhase = 3;

  optional int32 nodeCount = 4;

  optional int32 nodeAbnormal = 5;

  optional int32 workloadCount = 6;

  optional int32 workloadAbnormal = 7;

  optional bool hasMetricServer = 8;

  optional double cpuUsed = 9;

  optional double cpuRequest = 10;

  optional double cpuLimit = 11;

  optional double cpuCapacity = 12;

  optional double cpuAllocatable = 13;

  optional string cpuRequestRate = 14;

  optional string cpuAllocatableRate = 15;

  optional string cpuUsage = 16;

  optional int64 memUsed = 17;

  optional int64 memRequest = 18;

  optional int64 memLimit = 19;

  optional int64 memCapacity = 20;

  optional int64 memAllocatable = 21;

  optional string memRequestRate = 22;

  optional string memAllocatableRate = 23;

  optional string memUsage = 24;

  optional int32 podCount = 25;

  optional bool schedulerHealthy = 26;

  optional bool controllerManagerHealthy = 27;

  optional bool etcdHealthy = 28;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// Metric defines the structure for querying monitoring data requests and results.
message Metric {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional MetricQuery query = 2;

  // +optional
  optional string jsonResult = 3;
}

// MetricList is the whole list of all metrics.
message MetricList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of metrics
  repeated Metric items = 2;
}

message MetricQuery {
  optional string table = 1;

  // +optional
  optional int64 startTime = 2;

  // +optional
  optional int64 endTime = 3;

  repeated string fields = 4;

  repeated MetricQueryCondition conditions = 5;

  // +optional
  optional string orderBy = 6;

  // +optional
  optional string order = 7;

  repeated string groupBy = 8;

  optional int32 limit = 9;

  optional int32 offset = 10;
}

message MetricQueryCondition {
  optional string key = 1;

  optional string expr = 2;

  optional string value = 3;
}

// Prometheus is a kubernetes package manager.
message Prometheus {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional PrometheusSpec spec = 2;

  // +optional
  optional PrometheusStatus status = 3;
}

// PrometheusList is the whole list of all prometheus which owned by a tenant.
message PrometheusList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Prometheuss
  repeated Prometheus items = 2;
}

// PrometheusRemoteAddr is the remote write/read address for prometheus
message PrometheusRemoteAddr {
  repeated string writeAddr = 1;

  repeated string readAddr = 2;
}

// PrometheusSpec describes the attributes on a Prometheus.
message PrometheusSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;

  // SubVersion is the components version such as node-exporter.
  map<string, string> subVersion = 4;

  // RemoteAddress is the remote address for prometheus when writing/reading outside of cluster.
  optional PrometheusRemoteAddr remoteAddress = 5;

  // +optional
  // NotifyWebhook is the address that alert messages send to, optional. If not set, a default webhook address "https://[notify-api-address]/webhook" will be used.
  optional string notifyWebhook = 6;

  // +optional
  // Resources is the resource request and limit for prometheus
  optional ResourceRequirements resources = 7;

  // +optional
  // RunOnMaster indicates whether to add master Affinity for all monitor components or not
  optional bool runOnMaster = 8;

  // +optional
  // AlertRepeatInterval indicates repeat interval of alerts
  optional string alertRepeatInterval = 9;

  // +optional
  // WithNPD indicates whether to deploy node-problem-detector or not
  optional bool withNPD = 10;
}

// PrometheusStatus is information about the current status of a Prometheus.
message PrometheusStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the helm of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;

  // SubVersion is the components version such as node-exporter.
  map<string, string> subVersion = 6;
}

// ResourceRequirements describes the compute resource requirements.
message ResourceRequirements {
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> limits = 1;

  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> requests = 2;
}

