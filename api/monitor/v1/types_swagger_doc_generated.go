/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

package v1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_ClusterOverview = map[string]string{
	"": "ClusterOverview defines the structure for querying clusters' overview data request and result.",
}

func (ClusterOverview) SwaggerDoc() map[string]string {
	return map_ClusterOverview
}

var map_ConfigMap = map[string]string{
	"":           "ConfigMap holds configuration data for tke to consume.",
	"data":       "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
	"binaryData": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process.",
}

func (ConfigMap) SwaggerDoc() map[string]string {
	return map_ConfigMap
}

var map_ConfigMapList = map[string]string{
	"":      "ConfigMapList is a resource containing a list of ConfigMap objects.",
	"items": "Items is the list of ConfigMaps.",
}

func (ConfigMapList) SwaggerDoc() map[string]string {
	return map_ConfigMapList
}

var map_Metric = map[string]string{
	"": "Metric defines the structure for querying monitoring data requests and results.",
}

func (Metric) SwaggerDoc() map[string]string {
	return map_Metric
}

var map_MetricList = map[string]string{
	"":      "MetricList is the whole list of all metrics.",
	"items": "List of metrics",
}

func (MetricList) SwaggerDoc() map[string]string {
	return map_MetricList
}

var map_Prometheus = map[string]string{
	"":     "Prometheus is a kubernetes package manager.",
	"spec": "Spec defines the desired identities of clusters in this set.",
}

func (Prometheus) SwaggerDoc() map[string]string {
	return map_Prometheus
}

var map_PrometheusList = map[string]string{
	"":      "PrometheusList is the whole list of all prometheus which owned by a tenant.",
	"items": "List of Prometheuss",
}

func (PrometheusList) SwaggerDoc() map[string]string {
	return map_PrometheusList
}

var map_PrometheusRemoteAddr = map[string]string{
	"": "PrometheusRemoteAddr is the remote write/read address for prometheus",
}

func (PrometheusRemoteAddr) SwaggerDoc() map[string]string {
	return map_PrometheusRemoteAddr
}

var map_PrometheusSpec = map[string]string{
	"":                    "PrometheusSpec describes the attributes on a Prometheus.",
	"subVersion":          "SubVersion is the components version such as node-exporter.",
	"remoteAddress":       "RemoteAddress is the remote address for prometheus when writing/reading outside of cluster.",
	"notifyWebhook":       "NotifyWebhook is the address that alert messages send to, optional. If not set, a default webhook address \"https://[notify-api-address]/webhook\" will be used.",
	"resources":           "Resources is the resource request and limit for prometheus",
	"runOnMaster":         "RunOnMaster indicates whether to add master Affinity for all monitor components or not",
	"alertRepeatInterval": "AlertRepeatInterval indicates repeat interval of alerts",
	"withNPD":             "WithNPD indicates whether to deploy node-problem-detector or not",
}

func (PrometheusSpec) SwaggerDoc() map[string]string {
	return map_PrometheusSpec
}

var map_PrometheusStatus = map[string]string{
	"":                            "PrometheusStatus is information about the current status of a Prometheus.",
	"phase":                       "Phase is the current lifecycle phase of the helm of cluster.",
	"reason":                      "Reason is a brief CamelCase string that describes any failure.",
	"retryCount":                  "RetryCount is a int between 0 and 5 that describes the time of retrying initializing.",
	"lastReInitializingTimestamp": "LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.",
	"subVersion":                  "SubVersion is the components version such as node-exporter.",
}

func (PrometheusStatus) SwaggerDoc() map[string]string {
	return map_PrometheusStatus
}

var map_ResourceRequirements = map[string]string{
	"": "ResourceRequirements describes the compute resource requirements.",
}

func (ResourceRequirements) SwaggerDoc() map[string]string {
	return map_ResourceRequirements
}

// AUTO-GENERATED FUNCTIONS END HERE
