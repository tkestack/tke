// +build !ignore_autogenerated

/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by defaulter-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&Channel{}, func(obj interface{}) { SetObjectDefaults_Channel(obj.(*Channel)) })
	scheme.AddTypeDefaultingFunc(&ChannelList{}, func(obj interface{}) { SetObjectDefaults_ChannelList(obj.(*ChannelList)) })
	scheme.AddTypeDefaultingFunc(&ConfigMap{}, func(obj interface{}) { SetObjectDefaults_ConfigMap(obj.(*ConfigMap)) })
	scheme.AddTypeDefaultingFunc(&ConfigMapList{}, func(obj interface{}) { SetObjectDefaults_ConfigMapList(obj.(*ConfigMapList)) })
	scheme.AddTypeDefaultingFunc(&Message{}, func(obj interface{}) { SetObjectDefaults_Message(obj.(*Message)) })
	scheme.AddTypeDefaultingFunc(&MessageList{}, func(obj interface{}) { SetObjectDefaults_MessageList(obj.(*MessageList)) })
	scheme.AddTypeDefaultingFunc(&MessageRequest{}, func(obj interface{}) { SetObjectDefaults_MessageRequest(obj.(*MessageRequest)) })
	scheme.AddTypeDefaultingFunc(&MessageRequestList{}, func(obj interface{}) { SetObjectDefaults_MessageRequestList(obj.(*MessageRequestList)) })
	scheme.AddTypeDefaultingFunc(&Receiver{}, func(obj interface{}) { SetObjectDefaults_Receiver(obj.(*Receiver)) })
	scheme.AddTypeDefaultingFunc(&ReceiverGroup{}, func(obj interface{}) { SetObjectDefaults_ReceiverGroup(obj.(*ReceiverGroup)) })
	scheme.AddTypeDefaultingFunc(&ReceiverGroupList{}, func(obj interface{}) { SetObjectDefaults_ReceiverGroupList(obj.(*ReceiverGroupList)) })
	scheme.AddTypeDefaultingFunc(&ReceiverList{}, func(obj interface{}) { SetObjectDefaults_ReceiverList(obj.(*ReceiverList)) })
	scheme.AddTypeDefaultingFunc(&Template{}, func(obj interface{}) { SetObjectDefaults_Template(obj.(*Template)) })
	scheme.AddTypeDefaultingFunc(&TemplateList{}, func(obj interface{}) { SetObjectDefaults_TemplateList(obj.(*TemplateList)) })
	return nil
}

func SetObjectDefaults_Channel(in *Channel) {
	SetDefaults_ChannelStatus(&in.Status)
}

func SetObjectDefaults_ChannelList(in *ChannelList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Channel(a)
	}
}

func SetObjectDefaults_ConfigMap(in *ConfigMap) {
	SetDefaults_ConfigMap(in)
}

func SetObjectDefaults_ConfigMapList(in *ConfigMapList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_ConfigMap(a)
	}
}

func SetObjectDefaults_Message(in *Message) {
	SetDefaults_MessageStatus(&in.Status)
}

func SetObjectDefaults_MessageList(in *MessageList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Message(a)
	}
}

func SetObjectDefaults_MessageRequest(in *MessageRequest) {
	SetDefaults_MessageRequestSpec(&in.Spec)
	SetDefaults_MessageRequestStatus(&in.Status)
}

func SetObjectDefaults_MessageRequestList(in *MessageRequestList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_MessageRequest(a)
	}
}

func SetObjectDefaults_Receiver(in *Receiver) {
	SetDefaults_ReceiverSpec(&in.Spec)
}

func SetObjectDefaults_ReceiverGroup(in *ReceiverGroup) {
	SetDefaults_ReceiverGroupSpec(&in.Spec)
}

func SetObjectDefaults_ReceiverGroupList(in *ReceiverGroupList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_ReceiverGroup(a)
	}
}

func SetObjectDefaults_ReceiverList(in *ReceiverList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Receiver(a)
	}
}

func SetObjectDefaults_Template(in *Template) {
	SetDefaults_TemplateSpec(&in.Spec)
}

func SetObjectDefaults_TemplateList(in *TemplateList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Template(a)
	}
}
