/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.notify.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// Channel represents a message transmission channel in TKE.
message Channel {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired channel.
  // +optional
  optional ChannelSpec spec = 2;

  // +optional
  optional ChannelStatus status = 3;
}

// ChannelList is the whole list of all channels which owned by a tenant.
message ChannelList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of channels.
  repeated Channel items = 2;
}

// ChannelSMTP indicates a channel configuration for sending email notifications
// using the SMTP server.
message ChannelSMTP {
  optional string smtpHost = 1;

  optional int32 smtpPort = 2;

  optional bool tls = 3;

  optional string email = 4;

  optional string password = 5;
}

// ChannelSpec is a description of a channel.
message ChannelSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string tenantID = 2;

  optional string displayName = 3;

  // +optional
  optional ChannelTencentCloudSMS tencentCloudSMS = 4;

  // +optional
  optional ChannelWechat wechat = 5;

  // +optional
  optional ChannelSMTP smtp = 6;

  // +optional
  optional ChannelWebhook webhook = 7;
}

// ChannelStatus represents information about the status of a cluster.
message ChannelStatus {
  // +optional
  optional string phase = 3;
}

// ChannelTencentCloudSMS indicates the channel configuration for sending
// messages using Tencent Cloud SMS Gateway.
// See: https://cloud.tencent.com/document/product/382/5976
message ChannelTencentCloudSMS {
  optional string appKey = 1;

  optional string sdkAppID = 2;

  // +optional
  optional string extend = 3;
}

// ChannelWebhook indicates a channel configuration for sending notifications
// to the webhook server.
message ChannelWebhook {
  optional string url = 1;

  // +optional
  map<string, string> headers = 2;
}

// ChannelWechat indicates a channel configuration for sending template
// notifications using WeChat.
message ChannelWechat {
  // AppID indicates the unique credentials of the third-party user.
  // See https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140183
  optional string appID = 1;

  optional string appSecret = 2;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// Message indicates a message in the notification system.
message Message {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired message.
  // +optional
  optional MessageSpec spec = 2;

  // +optional
  optional MessageStatus status = 3;
}

// MessageList is the whole list of all message which owned by a tenant.
message MessageList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of messages.
  repeated Message items = 2;
}

// MessageRequest represents a message sending request, which may include
// multiple recipients and multiple receiving groups.
message MessageRequest {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired message.
  // +optional
  optional MessageRequestSpec spec = 2;

  // +optional
  optional MessageRequestStatus status = 3;
}

// MessageRequestList is the whole list of all message which owned by a tenant.
message MessageRequestList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of message requests.
  repeated MessageRequest items = 2;
}

// MessageRequestSpec is a description of a message request.
message MessageRequestSpec {
  optional string tenantID = 1;

  optional string templateName = 2;

  // +optional
  repeated string receivers = 3;

  // +optional
  repeated string receiverGroups = 4;

  // +optional
  map<string, string> variables = 5;
}

// MessageRequestStatus represents information about the status of a message request.
message MessageRequestStatus {
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // A human readable message indicating details about the transition.
  // +optional
  map<string, string> errors = 3;
}

// MessageSpec is a description of a message.
message MessageSpec {
  optional string tenantID = 1;

  optional string receiverName = 2;

  optional string receiverChannel = 3;

  optional string identity = 4;

  // +optional
  optional string username = 5;

  // +optional
  optional string header = 6;

  // +optional
  optional string body = 7;

  // +optional
  optional string channelMessageID = 8;

  // +optional
  optional string alarmPolicyName = 9;

  // +optional
  optional string alarmPolicyType = 10;

  // +optional
  optional string receiverChannelName = 11;

  // +optional
  optional string clusterID = 12;
}

// MessageStatus represents information about the status of a message.
message MessageStatus {
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;
}

// Receiver indicates a message notification recipient, usually representing a
// user in the user system or a webhook service address.
message Receiver {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired receiver.
  // +optional
  optional ReceiverSpec spec = 2;
}

// ReceiverGroup indicates multiple message recipients.
message ReceiverGroup {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired receiver group.
  // +optional
  optional ReceiverGroupSpec spec = 2;
}

// ReceiverGroupList is the whole list of all receiver which owned by a tenant.
message ReceiverGroupList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of receiver groups.
  repeated ReceiverGroup items = 2;
}

// ReceiverGroupSpec is a description of a receiver group.
message ReceiverGroupSpec {
  optional string tenantID = 1;

  optional string displayName = 2;

  // +optional
  repeated string receivers = 3;
}

// ReceiverList is the whole list of all receiver which owned by a tenant.
message ReceiverList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of receivers.
  repeated Receiver items = 2;
}

// ReceiverSpec is a description of a receiver.
message ReceiverSpec {
  optional string tenantID = 1;

  optional string displayName = 2;

  // +optional
  optional string username = 3;

  // Identities represents the characteristics of the message recipient.
  // The hash table key represents the message delivery channel id, and the value represents
  // the user identification number in the channel.
  // For example, if it is a short message sending channel, then the value is the user's
  // mobile phone number; if it is a mail sending channel, then the value is the user's
  // email address.
  // +optional
  map<string, string> identities = 4;
}

// Template indicates the template used to send notifications under this channel.
message Template {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired template.
  // +optional
  optional TemplateSpec spec = 2;
}

// TemplateList is the whole list of all template which owned by a channel.
message TemplateList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of templates.
  repeated Template items = 2;
}

// TemplateSpec is a description of a template.
message TemplateSpec {
  optional string tenantID = 1;

  optional string displayName = 2;

  // +optional
  repeated string keys = 3;

  // +optional
  optional TemplateTencentCloudSMS tencentCloudSMS = 4;

  // +optional
  optional TemplateWechat wechat = 5;

  // +optional
  optional TemplateText text = 6;
}

// TemplateTencentCloudSMS indicates the template used when sending text
// messages using Tencent Cloud SMS Gateway.
// The template must be approved.
message TemplateTencentCloudSMS {
  optional string templateID = 1;

  // +optional
  optional string sign = 2;

  // +optional
  optional string body = 3;
}

// TemplateText indicates the template used to send notifications using other
// non-templated channels.
message TemplateText {
  optional string body = 1;

  // +optional
  optional string header = 2;
}

// TemplateWechat indicates the template when sending a text message using the
// WeChat public account.
// The template must be approved and registered.
message TemplateWechat {
  // TemplateID indicates the template id of the template message notification.
  // See https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140183
  optional string templateID = 1;

  // URL indicates the web address of the user who clicked the notification in WeChat.
  // +optional
  optional string url = 2;

  // MiniProgramAppID indicates the unique identification number of the WeChat applet
  // that the user clicked on the notification in WeChat.
  // +optional
  optional string miniProgramAppID = 3;

  // +optional
  optional string miniProgramPagePath = 4;

  // +optional
  optional string body = 5;
}

