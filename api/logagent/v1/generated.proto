/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.logagent.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// LogAgent is a manager to collect logs of workload.
message LogAgent {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of LogCollector.
  // +optional
  optional LogAgentSpec spec = 2;

  // +optional
  optional LogAgentStatus status = 3;
}

// LogAgentList is the whole list of all logagents which owned by a tenant.
message LogAgentList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of volume decorators.
  repeated LogAgent items = 2;
}

// LogAgentProxyOptions is the query options to a kube-apiserver proxy call for LogAgent crd object.
message LogAgentProxyOptions {
  optional string namespace = 1;

  optional string name = 2;
}

// LogAgentSpec describes the attributes of a Logagent.
message LogAgentSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// LogAgentStatus is information about the current status of a Logagent.
message LogAgentStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the LogCollector of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// LogFileContent
message LogFileContent {
  optional LogFileContentSpec spec = 2;
}

message LogFileContentSpec {
  optional string clusterId = 1;

  optional string namespace = 2;

  optional string container = 3;

  optional string pod = 4;

  optional int32 start = 5;

  optional int32 length = 6;

  optional string filepath = 7;
}

// LogFileDownload
message LogFileDownload {
  optional LogFileDownloadSpec spec = 2;
}

message LogFileDownloadSpec {
  optional string clusterId = 1;

  optional string namespace = 2;

  optional string container = 3;

  optional string pod = 4;

  optional int32 start = 5;

  optional int32 length = 6;

  optional string filepath = 7;
}

// LogFileTree
message LogFileTree {
  optional LogFileTreeSpec spec = 2;
}

message LogFileTreeSpec {
  optional string clusterId = 1;

  optional string namespace = 2;

  optional string container = 3;

  optional string pod = 4;
}

