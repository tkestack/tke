/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.business.v1;

import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ChartGroup is an chart group.
message ChartGroup {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of namespaces in this set.
  // +optional
  optional ChartGroupSpec spec = 2;

  // +optional
  optional ChartGroupStatus status = 3;
}

// ChartGroupList is the whole list of all chart groups which owned by a tenant.
message ChartGroupList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of namespaces
  repeated ChartGroup items = 2;
}

// ChartGroupSpec represents an chart group.
message ChartGroupSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string name = 2;

  optional string tenantID = 3;

  // +optional
  optional string displayName = 4;
}

// ChartGroupStatus represents information about the status of an chart group.
message ChartGroupStatus {
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// HardQuantity is a straightforward wrapper of ResourceList.
message HardQuantity {
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> hard = 1;
}

// ImageNamespace is an image namespace.
message ImageNamespace {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of namespaces in this set.
  // +optional
  optional ImageNamespaceSpec spec = 2;

  // +optional
  optional ImageNamespaceStatus status = 3;
}

// ImageNamespaceList is the whole list of all image namespaces which owned by a tenant.
message ImageNamespaceList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of namespaces
  repeated ImageNamespace items = 2;
}

// ImageNamespaceSpec represents an image namespace.
message ImageNamespaceSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string name = 2;

  optional string tenantID = 3;

  // +optional
  optional string displayName = 4;
}

// ImageNamespaceStatus represents information about the status of an image namespace.
message ImageNamespaceStatus {
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;
}

// Namespace is a namespace in cluster.
message Namespace {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of namespaces in this set.
  // +optional
  optional NamespaceSpec spec = 2;

  // +optional
  optional NamespaceStatus status = 3;
}

// NamespaceList is the whole list of all namespaces which owned by a tenant.
message NamespaceList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of namespaces
  repeated Namespace items = 2;
}

// NamespaceSpec represents a namespace in cluster of a project.
message NamespaceSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string tenantID = 2;

  optional string clusterName = 3;

  optional string namespace = 4;

  // Hard represents the total resources of a namespace.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> hard = 5;
}

// NamespaceStatus represents information about the status of a namespace in project.
message NamespaceStatus {
  // +optional
  optional string phase = 1;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 2;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 4;

  // +optional
  optional string resourceQuotaName = 5;

  // Used represents the resources of a namespace that are used.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> used = 6;
}

// Platform is a platform in TKE.
message Platform {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of platforms in this set.
  // +optional
  optional PlatformSpec spec = 2;
}

// PlatformList is the whole list of all platforms which owned by a tenant.
message PlatformList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of platform.
  repeated Platform items = 2;
}

// PlatformSpec is a description of a platform.
message PlatformSpec {
  optional string tenantID = 1;

  repeated string administrators = 2;
}

// Portal is a user in TKE.
message Portal {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Administrator indicates whether the user is a platform administrator
  optional bool administrator = 2;

  // Projects represents the list of projects to which the user belongs, where the key represents
  // project name and the value represents the project display name.
  map<string, string> projects = 3;
}

// Project is a project in TKE.
message Project {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of project in this set.
  // +optional
  optional ProjectSpec spec = 2;

  // +optional
  optional ProjectStatus status = 3;
}

// ProjectList is the whole list of all projects which owned by a tenant.
message ProjectList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of projects
  repeated Project items = 2;
}

// ProjectSpec is a description of a project.
message ProjectSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string tenantID = 2;

  // +optional
  optional string displayName = 3;

  // Members represents the user list of project.
  repeated string members = 4;

  // ParentProjectName indicates the superior project name of this service.
  // +optional
  optional string parentProjectName = 5;

  // Clusters represents clusters that can be used and the resource limits of each cluster.
  // +optional
  map<string, HardQuantity> clusters = 6;
}

// ProjectStatus represents information about the status of a project.
message ProjectStatus {
  // +optional
  optional bool locked = 1;

  // +optional
  optional string phase = 2;

  // Clusters represents clusters that have been used and the resource usage of each cluster.
  // +optional
  map<string, UsedQuantity> clusters = 3;

  // +optional
  repeated string calculatedChildProjects = 4;

  // +optional
  repeated string calculatedNamespaces = 5;
}

// UsedQuantity is a straightforward wrapper of ResourceList.
message UsedQuantity {
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> used = 1;
}

