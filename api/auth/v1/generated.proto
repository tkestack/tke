/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.auth.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// APIKey contains expiration time used to apply the api key.
message APIKey {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta objectMeta = 1;

  // Spec defines the desired identities of APIkey in this set.
  optional APIKeySpec spec = 2;

  optional APIKeyStatus status = 3;
}

// APIKeyList is the whole list of all identities.
message APIKeyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta listMeta = 1;

  // List of api keys.
  repeated APIKey items = 2;
}

// APIKeyReq contains expiration time used to apply the api key.
message APIKeyReq {
  // Expire is required, holds the duration of the api key become invalid. By default, 168h(= seven days)
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration expire = 2;

  // Description describes api keys usage.
  optional string description = 3;
}

// APIKeyReqPassword contains userinfo and expiration time used to apply the api key.
message APIKeyReqPassword {
  // TenantID for user
  optional string tenantID = 2;

  // Username
  optional string username = 3;

  // Password (encoded by base64)
  optional string password = 4;

  // Description describes api keys usage.
  // +optional
  optional string description = 5;

  // Expire holds the duration of the api key become invalid. By default, 168h(= seven days)
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration expire = 6;
}

// APIKeySpec is a description of an apiKey.
message APIKeySpec {
  // APIkey is the jwt token used to authenticate user, and contains user info and sign.
  optional string apiKey = 1;

  optional string tenantID = 5;

  // Username is creator
  // +optional
  optional string username = 6;

  // Description describes api keys usage.
  // +optional
  optional string description = 2;

  // IssueAt is the created time for api key
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time issue_at = 3;

  // ExpireAt is the expire time for api key
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expire_at = 4;
}

// APIKeyStatus is a description of an api key status.
message APIKeyStatus {
  // Disabled represents whether the apikey has been disabled.
  // +optional
  optional bool disabled = 1;

  // Expired represents whether the apikey has been expired.
  optional bool expired = 2;
}

// APISigningKey hold encryption and signing key.
message APISigningKey {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional bytes signingKey = 2;

  // +optional
  optional bytes signingKeyPub = 3;
}

// APISigningKeyList is the whole list of all signing key.
message APISigningKeyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of keys.
  repeated APISigningKey items = 2;
}

// Action defines a action verb for authorization.
message Action {
  // Name represents user access review request verb.
  optional string name = 1;

  // Description describes the action.
  optional string description = 2;
}

// AllowedStatus includes the resource access request and response.
// +k8s:openapi-gen=true
message AllowedStatus {
  // Resource is the resource of request
  optional string resource = 1;

  // Verb is the verb of request
  optional string web = 2;

  // Allowed is required. True if the action would be allowed, false otherwise.
  optional bool allowed = 3;

  // Denied is optional. True if the action would be denied, otherwise
  // false. If both allowed is false and denied is false, then the
  // authorizer has no opinion on whether to authorize the action. Denied
  // may not be true if Allowed is true.
  optional bool denied = 4;

  // Reason is optional.  It indicates why a request was allowed or denied.
  optional string reason = 5;

  // EvaluationError is an indication that some error occurred during the authorization check.
  // It is entirely possible to get an error and be able to continue determine authorization status in spite of it.
  // For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
  optional string evaluationError = 6;
}

// Binding is used to bind or unbind the subjects to or from the policy,role or group.
message Binding {
  // Users holds references to the objects the policy applies to.
  // +optional
  repeated Subject users = 1;

  // Groups holds references to the groups the policy applies to.
  // +optional
  repeated Subject groups = 2;
}

// Category defines a category of actions for policy.
message Category {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional CategorySpec spec = 2;
}

// CategoryList is the whole list of policy Category.
message CategoryList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of category.
  repeated Category items = 2;
}

// CategorySpec is a description of category.
message CategorySpec {
  // DisplayName used to display category name
  optional string displayName = 2;

  // +optional
  optional string description = 3;

  // Actions represents a series of actions work on the policy category
  repeated Action actions = 4;
}

// Client represents an OAuth2 client.
message Client {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of identity provider in this set.
  optional ClientSpec spec = 2;
}

// ClientList is the whole list of OAuth2 client.
message ClientList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of identity providers.
  repeated Client items = 2;
}

// ClientSpec is a description of an client.
message ClientSpec {
  optional string id = 1;

  optional string secret = 2;

  repeated string redirect_uris = 3;

  // TrustedPeers are a list of peers which can issue tokens on this client's behalf using the dynamic "oauth2:server:client_id:(client_id)" scope.
  repeated string trusted_peers = 4;

  // Public clients must use either use a redirectURL 127.0.0.1:X or "urn:ietf:wg:oauth:2.0:oob".
  optional bool public = 5;

  optional string name = 6;

  optional string logo_url = 7;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// ExtraValue masks the value so protobuf can generate
// +protobuf.nullable=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
message ExtraValue {
  // items, if empty, will result in an empty slice

  repeated string items = 1;
}

// Group is an object that contains the metadata about identify about tke local idp or third-party idp.
message Group {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of group in this set.
  optional GroupSpec spec = 2;

  optional GroupStatus status = 3;
}

// GroupList is the whole list of all groups.
message GroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Group.
  repeated Group items = 2;
}

// GroupSpec is a description of a Group.
message GroupSpec {
  optional string id = 1;

  optional string displayName = 2;

  optional string tenantID = 3;

  optional string description = 4;
}

// GroupStatus represents information about the status of a group.
message GroupStatus {
  // Users represents the members of the group.
  repeated Subject users = 2;
}

// IdentityProvider is an object that contains the metadata about identify
// provider used to login to TKE.
message IdentityProvider {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of identity provider in this set.
  optional IdentityProviderSpec spec = 2;
}

// IdentityProviderList is the whole list of all identity providers.
message IdentityProviderList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of identity providers.
  repeated IdentityProvider items = 2;
}

// IdentityProviderSpec is a description of an identity provider.
message IdentityProviderSpec {
  // The Name of the connector that is used when displaying it to the end user.
  optional string name = 1;

  // The type of the connector. E.g. 'oidc' or 'ldap'
  optional string type = 2;

  // The administrators means the users is super admin for the idp.
  repeated string administrators = 3;

  // Config holds all the configuration information specific to the connector type. Since there
  // no generic struct we can use for this purpose, it is stored as a json string.
  optional string config = 4;
}

// LocalGroup represents a group of users.
message LocalGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of group document in this set.
  optional LocalGroupSpec spec = 2;

  // +optional
  optional LocalGroupStatus status = 3;
}

// LocalGroupList is the whole list of all groups.
message LocalGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of LocalGroup.
  repeated LocalGroup items = 2;
}

// LocalGroupSpec is a description of group.
message LocalGroupSpec {
  repeated string finalizers = 1;

  optional string displayName = 2;

  optional string tenantID = 3;

  optional string username = 4;

  optional string description = 5;
}

// LocalGroupStatus represents information about the status of a group.
message LocalGroupStatus {
  // +optional
  optional string phase = 1;

  // Users represents the members of the group.
  repeated Subject users = 2;
}

// LocalIdentity is an object that contains the metadata about identify used to
// login to TKE.
message LocalIdentity {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of identity in this set.
  // +optional
  optional LocalIdentitySpec spec = 2;

  // +optional
  optional LocalIdentityStatus status = 3;
}

// LocalIdentityList is the whole list of all identities.
message LocalIdentityList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of identities.
  repeated LocalIdentity items = 2;
}

// LocalIdentitySpec is a description of an identity.
message LocalIdentitySpec {
  repeated string finalizers = 11;

  optional string name = 7;

  optional string displayName = 8;

  optional string email = 9;

  optional string phone = 10;

  optional string hashedPassword = 4;

  // +optional
  optional string tenantID = 2;

  repeated string groups = 6;

  // +optional
  map<string, string> extra = 3;
}

// LocalIdentityStatus is a description of an identity status.
message LocalIdentityStatus {
  optional string phase = 3;

  // +optional
  optional bool locked = 1;

  // The last time the local identity was updated.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 2;
}

// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
message NonResourceAttributes {
  // Path is the URL path of the request
  // +optional
  optional string path = 1;

  // Verb is the standard HTTP verb
  // +optional
  optional string verb = 2;
}

// PasswordReq contains info to update password for a localIdentity
message PasswordReq {
  optional string hashedPassword = 1;

  optional string originalPassword = 2;
}

// Policy represents a policy document for access control.
message Policy {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of policy document in this set.
  // +optional
  optional PolicySpec spec = 2;

  // +optional
  optional PolicyStatus status = 3;
}

// PolicyBinding references the request to bind or unbind policies to the role.
message PolicyBinding {
  // Policies holds the policies will bind or unbind to the role.
  // +optional
  repeated string policies = 1;
}

// PolicyList is the whole list of all policies.
message PolicyList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of policies.
  repeated Policy items = 2;
}

// PolicySpec is a description of a policy.
message PolicySpec {
  repeated string finalizers = 8;

  optional string displayName = 7;

  optional string tenantID = 1;

  optional string category = 9;

  optional string type = 10;

  optional string username = 2;

  // +optional
  optional string description = 3;

  optional Statement statement = 5;

  // +optional
  optional bytes conditions = 6;
}

// PolicyStatus represents information about the status of a policy.
message PolicyStatus {
  // +optional
  optional string phase = 1;

  // +optional
  // Users represents the users the policy applies to.
  repeated Subject users = 2;

  // +optional
  // Groups represents the groups the policy applies to.
  repeated Subject groups = 3;
}

// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
message ResourceAttributes {
  // Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
  // "" (empty) is defaulted for LocalSubjectAccessReviews
  // "" (empty) is empty for cluster-scoped resources
  // "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
  // +optional
  optional string namespace = 1;

  // Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
  // +optional
  optional string verb = 2;

  // Group is the API Group of the Resource.  "*" means all.
  // +optional
  optional string group = 3;

  // Version is the API Version of the Resource.  "*" means all.
  // +optional
  optional string version = 4;

  // Resource is one of the existing resource types.  "*" means all.
  // +optional
  optional string resource = 5;

  // Subresource is one of the existing resource types.  "" means none.
  // +optional
  optional string subresource = 6;

  // Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
  // +optional
  optional string name = 7;
}

// Role is a collection with multiple policies.
message Role {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of role document in this set.
  optional RoleSpec spec = 2;

  // +optional
  optional RoleStatus status = 3;
}

// RoleList is the whole list of policy.
message RoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of rules.
  repeated Role items = 2;
}

// RoleSpec is a description of role.
message RoleSpec {
  repeated string finalizers = 1;

  optional string displayName = 2;

  optional string tenantID = 3;

  // Username is Creator
  optional string username = 4;

  optional string description = 5;

  repeated string policies = 6;
}

// RoleStatus represents information about the status of a role.
message RoleStatus {
  // +optional
  optional string phase = 1;

  // +optional
  // Users represents the users the role applies to.
  repeated Subject users = 2;

  // +optional
  // Groups represents the groups the role applies to.
  repeated Subject groups = 3;
}

// Rule represents a rule document for access control.
message Rule {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of policy document in this set.
  optional RuleSpec spec = 2;
}

// RuleList is the whole list of all rules.
message RuleList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of rules.
  repeated Rule items = 2;
}

// RuleSpec is a description of a rule.
message RuleSpec {
  optional string ptype = 1;

  optional string v0 = 2;

  optional string v1 = 3;

  optional string v2 = 4;

  optional string v3 = 5;

  optional string v4 = 6;

  optional string v5 = 7;

  optional string v6 = 8;
}

// Statement defines a series of action on resource can be done or not.
message Statement {
  repeated string actions = 1;

  repeated string resources = 2;

  // Effect indicates action on the resource is allowed or not, can be "allow" or "deny"
  optional string effect = 3;
}

// Subject references a user can specify by id or name.
message Subject {
  optional string id = 1;

  optional string name = 2;
}

// SubjectAccessReview checks whether or not a user or group can perform an action.  Not filling in a
// spec.namespace means "in all namespaces".
message SubjectAccessReview {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec holds information about the request being evaluated
  optional SubjectAccessReviewSpec spec = 2;

  // Status is filled in by the server and indicates whether the request is allowed or not
  optional SubjectAccessReviewStatus status = 3;
}

// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAttributes
// and NonResourceAttributes must be set
message SubjectAccessReviewSpec {
  // ResourceAttributes describes information for a resource access request
  optional ResourceAttributes resourceAttributes = 7;

  // ResourceAttributesList describes information for multi resource access request.
  repeated ResourceAttributes resourceAttributesList = 8;

  // NonResourceAttributes describes information for a non-resource access request
  optional NonResourceAttributes nonResourceAttributes = 9;

  // User is the user you're testing for.
  // If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
  // +optional
  optional string user = 3;

  // Groups is the groups you're testing for.
  // +optional
  repeated string groups = 4;

  // Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer
  // it needs a reflection here.
  // +optional
  map<string, ExtraValue> extra = 5;

  // UID information about the requesting user.
  // +optional
  optional string uid = 6;
}

// SubjectAccessReviewStatus represents the current state of a SubjectAccessReview.
message SubjectAccessReviewStatus {
  // Allowed is required. True if the action would be allowed, false otherwise.
  optional bool allowed = 1;

  // Denied is optional. True if the action would be denied, otherwise
  // false. If both allowed is false and denied is false, then the
  // authorizer has no opinion on whether to authorize the action. Denied
  // may not be true if Allowed is true.
  // +optional
  optional bool denied = 4;

  // Reason is optional.  It indicates why a request was allowed or denied.
  // +optional
  optional string reason = 2;

  // EvaluationError is an indication that some error occurred during the authorization check.
  // It is entirely possible to get an error and be able to continue determine authorization status in spite of it.
  // For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
  // +optional
  optional string evaluationError = 3;

  // AllowedList is the allowed response for batch authorization request.
  repeated AllowedStatus allowedList = 5;
}

// User is an object that contains the metadata about identify about tke local idp or third-party idp.
message User {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of identity in this set.
  optional UserSpec spec = 2;
}

// UserList is the whole list of all users.
message UserList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of User.
  repeated User items = 2;
}

// UserSpec is a description of an user.
message UserSpec {
  optional string id = 1;

  // Name must be unique in the same tenant.
  optional string name = 2;

  optional string displayName = 3;

  optional string email = 4;

  optional string phoneNumber = 5;

  optional string tenantID = 6;

  map<string, string> extra = 7;
}

