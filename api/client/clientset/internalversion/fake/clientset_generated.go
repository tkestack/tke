/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
	clientset "tkestack.io/tke/api/client/clientset/internalversion"
	applicationinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/application/internalversion"
	fakeapplicationinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/application/internalversion/fake"
	authinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/auth/internalversion"
	fakeauthinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/auth/internalversion/fake"
	businessinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/business/internalversion"
	fakebusinessinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/business/internalversion/fake"
	logagentinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/logagent/internalversion"
	fakelogagentinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/logagent/internalversion/fake"
	monitorinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/monitor/internalversion"
	fakemonitorinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/monitor/internalversion/fake"
	notifyinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/notify/internalversion"
	fakenotifyinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/notify/internalversion/fake"
	platforminternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/platform/internalversion"
	fakeplatforminternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/platform/internalversion/fake"
	registryinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/registry/internalversion"
	fakeregistryinternalversion "tkestack.io/tke/api/client/clientset/internalversion/typed/registry/internalversion/fake"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// Application retrieves the ApplicationClient
func (c *Clientset) Application() applicationinternalversion.ApplicationInterface {
	return &fakeapplicationinternalversion.FakeApplication{Fake: &c.Fake}
}

// Auth retrieves the AuthClient
func (c *Clientset) Auth() authinternalversion.AuthInterface {
	return &fakeauthinternalversion.FakeAuth{Fake: &c.Fake}
}

// Business retrieves the BusinessClient
func (c *Clientset) Business() businessinternalversion.BusinessInterface {
	return &fakebusinessinternalversion.FakeBusiness{Fake: &c.Fake}
}

// Logagent retrieves the LogagentClient
func (c *Clientset) Logagent() logagentinternalversion.LogagentInterface {
	return &fakelogagentinternalversion.FakeLogagent{Fake: &c.Fake}
}

// Monitor retrieves the MonitorClient
func (c *Clientset) Monitor() monitorinternalversion.MonitorInterface {
	return &fakemonitorinternalversion.FakeMonitor{Fake: &c.Fake}
}

// Notify retrieves the NotifyClient
func (c *Clientset) Notify() notifyinternalversion.NotifyInterface {
	return &fakenotifyinternalversion.FakeNotify{Fake: &c.Fake}
}

// Platform retrieves the PlatformClient
func (c *Clientset) Platform() platforminternalversion.PlatformInterface {
	return &fakeplatforminternalversion.FakePlatform{Fake: &c.Fake}
}

// Registry retrieves the RegistryClient
func (c *Clientset) Registry() registryinternalversion.RegistryInterface {
	return &fakeregistryinternalversion.FakeRegistry{Fake: &c.Fake}
}
