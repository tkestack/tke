/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2019 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	auth "tkestack.io/tke/api/auth"
)

// FakeProjectPolicyBindings implements ProjectPolicyBindingInterface
type FakeProjectPolicyBindings struct {
	Fake *FakeAuth
}

var projectpolicybindingsResource = schema.GroupVersionResource{Group: "auth.tkestack.io", Version: "", Resource: "projectpolicybindings"}

var projectpolicybindingsKind = schema.GroupVersionKind{Group: "auth.tkestack.io", Version: "", Kind: "ProjectPolicyBinding"}

// Get takes name of the projectPolicyBinding, and returns the corresponding projectPolicyBinding object, and an error if there is any.
func (c *FakeProjectPolicyBindings) Get(name string, options v1.GetOptions) (result *auth.ProjectPolicyBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(projectpolicybindingsResource, name), &auth.ProjectPolicyBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*auth.ProjectPolicyBinding), err
}

// List takes label and field selectors, and returns the list of ProjectPolicyBindings that match those selectors.
func (c *FakeProjectPolicyBindings) List(opts v1.ListOptions) (result *auth.ProjectPolicyBindingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(projectpolicybindingsResource, projectpolicybindingsKind, opts), &auth.ProjectPolicyBindingList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &auth.ProjectPolicyBindingList{ListMeta: obj.(*auth.ProjectPolicyBindingList).ListMeta}
	for _, item := range obj.(*auth.ProjectPolicyBindingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested projectPolicyBindings.
func (c *FakeProjectPolicyBindings) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(projectpolicybindingsResource, opts))
}

// Create takes the representation of a projectPolicyBinding and creates it.  Returns the server's representation of the projectPolicyBinding, and an error, if there is any.
func (c *FakeProjectPolicyBindings) Create(projectPolicyBinding *auth.ProjectPolicyBinding) (result *auth.ProjectPolicyBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(projectpolicybindingsResource, projectPolicyBinding), &auth.ProjectPolicyBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*auth.ProjectPolicyBinding), err
}

// Update takes the representation of a projectPolicyBinding and updates it. Returns the server's representation of the projectPolicyBinding, and an error, if there is any.
func (c *FakeProjectPolicyBindings) Update(projectPolicyBinding *auth.ProjectPolicyBinding) (result *auth.ProjectPolicyBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(projectpolicybindingsResource, projectPolicyBinding), &auth.ProjectPolicyBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*auth.ProjectPolicyBinding), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeProjectPolicyBindings) UpdateStatus(projectPolicyBinding *auth.ProjectPolicyBinding) (*auth.ProjectPolicyBinding, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(projectpolicybindingsResource, "status", projectPolicyBinding), &auth.ProjectPolicyBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*auth.ProjectPolicyBinding), err
}

// Delete takes name of the projectPolicyBinding and deletes it. Returns an error if one occurs.
func (c *FakeProjectPolicyBindings) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(projectpolicybindingsResource, name), &auth.ProjectPolicyBinding{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProjectPolicyBindings) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(projectpolicybindingsResource, listOptions)

	_, err := c.Fake.Invokes(action, &auth.ProjectPolicyBindingList{})
	return err
}

// Patch applies the patch and returns the patched projectPolicyBinding.
func (c *FakeProjectPolicyBindings) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *auth.ProjectPolicyBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(projectpolicybindingsResource, name, pt, data, subresources...), &auth.ProjectPolicyBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*auth.ProjectPolicyBinding), err
}
