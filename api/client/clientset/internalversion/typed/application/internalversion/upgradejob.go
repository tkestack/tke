/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	application "tkestack.io/tke/api/application"
	scheme "tkestack.io/tke/api/client/clientset/internalversion/scheme"
)

// UpgradeJobsGetter has a method to return a UpgradeJobInterface.
// A group's client should implement this interface.
type UpgradeJobsGetter interface {
	UpgradeJobs(namespace string) UpgradeJobInterface
}

// UpgradeJobInterface has methods to work with UpgradeJob resources.
type UpgradeJobInterface interface {
	Create(ctx context.Context, upgradeJob *application.UpgradeJob, opts v1.CreateOptions) (*application.UpgradeJob, error)
	Update(ctx context.Context, upgradeJob *application.UpgradeJob, opts v1.UpdateOptions) (*application.UpgradeJob, error)
	UpdateStatus(ctx context.Context, upgradeJob *application.UpgradeJob, opts v1.UpdateOptions) (*application.UpgradeJob, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*application.UpgradeJob, error)
	List(ctx context.Context, opts v1.ListOptions) (*application.UpgradeJobList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *application.UpgradeJob, err error)
	UpgradeJobExpansion
}

// upgradeJobs implements UpgradeJobInterface
type upgradeJobs struct {
	client rest.Interface
	ns     string
}

// newUpgradeJobs returns a UpgradeJobs
func newUpgradeJobs(c *ApplicationClient, namespace string) *upgradeJobs {
	return &upgradeJobs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the upgradeJob, and returns the corresponding upgradeJob object, and an error if there is any.
func (c *upgradeJobs) Get(ctx context.Context, name string, options v1.GetOptions) (result *application.UpgradeJob, err error) {
	result = &application.UpgradeJob{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("upgradejobs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of UpgradeJobs that match those selectors.
func (c *upgradeJobs) List(ctx context.Context, opts v1.ListOptions) (result *application.UpgradeJobList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &application.UpgradeJobList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("upgradejobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested upgradeJobs.
func (c *upgradeJobs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("upgradejobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a upgradeJob and creates it.  Returns the server's representation of the upgradeJob, and an error, if there is any.
func (c *upgradeJobs) Create(ctx context.Context, upgradeJob *application.UpgradeJob, opts v1.CreateOptions) (result *application.UpgradeJob, err error) {
	result = &application.UpgradeJob{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("upgradejobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(upgradeJob).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a upgradeJob and updates it. Returns the server's representation of the upgradeJob, and an error, if there is any.
func (c *upgradeJobs) Update(ctx context.Context, upgradeJob *application.UpgradeJob, opts v1.UpdateOptions) (result *application.UpgradeJob, err error) {
	result = &application.UpgradeJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("upgradejobs").
		Name(upgradeJob.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(upgradeJob).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *upgradeJobs) UpdateStatus(ctx context.Context, upgradeJob *application.UpgradeJob, opts v1.UpdateOptions) (result *application.UpgradeJob, err error) {
	result = &application.UpgradeJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("upgradejobs").
		Name(upgradeJob.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(upgradeJob).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the upgradeJob and deletes it. Returns an error if one occurs.
func (c *upgradeJobs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("upgradejobs").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *upgradeJobs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("upgradejobs").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched upgradeJob.
func (c *upgradeJobs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *application.UpgradeJob, err error) {
	result = &application.UpgradeJob{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("upgradejobs").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
