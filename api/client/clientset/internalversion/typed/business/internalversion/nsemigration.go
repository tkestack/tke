/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	business "tkestack.io/tke/api/business"
	scheme "tkestack.io/tke/api/client/clientset/internalversion/scheme"
)

// NsEmigrationsGetter has a method to return a NsEmigrationInterface.
// A group's client should implement this interface.
type NsEmigrationsGetter interface {
	NsEmigrations(namespace string) NsEmigrationInterface
}

// NsEmigrationInterface has methods to work with NsEmigration resources.
type NsEmigrationInterface interface {
	Create(ctx context.Context, nsEmigration *business.NsEmigration, opts v1.CreateOptions) (*business.NsEmigration, error)
	Update(ctx context.Context, nsEmigration *business.NsEmigration, opts v1.UpdateOptions) (*business.NsEmigration, error)
	UpdateStatus(ctx context.Context, nsEmigration *business.NsEmigration, opts v1.UpdateOptions) (*business.NsEmigration, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*business.NsEmigration, error)
	List(ctx context.Context, opts v1.ListOptions) (*business.NsEmigrationList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *business.NsEmigration, err error)
	NsEmigrationExpansion
}

// nsEmigrations implements NsEmigrationInterface
type nsEmigrations struct {
	client rest.Interface
	ns     string
}

// newNsEmigrations returns a NsEmigrations
func newNsEmigrations(c *BusinessClient, namespace string) *nsEmigrations {
	return &nsEmigrations{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the nsEmigration, and returns the corresponding nsEmigration object, and an error if there is any.
func (c *nsEmigrations) Get(ctx context.Context, name string, options v1.GetOptions) (result *business.NsEmigration, err error) {
	result = &business.NsEmigration{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("nsemigrations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NsEmigrations that match those selectors.
func (c *nsEmigrations) List(ctx context.Context, opts v1.ListOptions) (result *business.NsEmigrationList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &business.NsEmigrationList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("nsemigrations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nsEmigrations.
func (c *nsEmigrations) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("nsemigrations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a nsEmigration and creates it.  Returns the server's representation of the nsEmigration, and an error, if there is any.
func (c *nsEmigrations) Create(ctx context.Context, nsEmigration *business.NsEmigration, opts v1.CreateOptions) (result *business.NsEmigration, err error) {
	result = &business.NsEmigration{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("nsemigrations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nsEmigration).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a nsEmigration and updates it. Returns the server's representation of the nsEmigration, and an error, if there is any.
func (c *nsEmigrations) Update(ctx context.Context, nsEmigration *business.NsEmigration, opts v1.UpdateOptions) (result *business.NsEmigration, err error) {
	result = &business.NsEmigration{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("nsemigrations").
		Name(nsEmigration.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nsEmigration).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *nsEmigrations) UpdateStatus(ctx context.Context, nsEmigration *business.NsEmigration, opts v1.UpdateOptions) (result *business.NsEmigration, err error) {
	result = &business.NsEmigration{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("nsemigrations").
		Name(nsEmigration.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nsEmigration).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the nsEmigration and deletes it. Returns an error if one occurs.
func (c *nsEmigrations) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("nsemigrations").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nsEmigrations) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("nsemigrations").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched nsEmigration.
func (c *nsEmigrations) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *business.NsEmigration, err error) {
	result = &business.NsEmigration{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("nsemigrations").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
