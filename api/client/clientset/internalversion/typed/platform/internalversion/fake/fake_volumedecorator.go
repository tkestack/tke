/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	platform "tkestack.io/tke/api/platform"
)

// FakeVolumeDecorators implements VolumeDecoratorInterface
type FakeVolumeDecorators struct {
	Fake *FakePlatform
}

var volumedecoratorsResource = schema.GroupVersionResource{Group: "platform.tkestack.io", Version: "", Resource: "volumedecorators"}

var volumedecoratorsKind = schema.GroupVersionKind{Group: "platform.tkestack.io", Version: "", Kind: "VolumeDecorator"}

// Get takes name of the volumeDecorator, and returns the corresponding volumeDecorator object, and an error if there is any.
func (c *FakeVolumeDecorators) Get(ctx context.Context, name string, options v1.GetOptions) (result *platform.VolumeDecorator, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(volumedecoratorsResource, name), &platform.VolumeDecorator{})
	if obj == nil {
		return nil, err
	}
	return obj.(*platform.VolumeDecorator), err
}

// List takes label and field selectors, and returns the list of VolumeDecorators that match those selectors.
func (c *FakeVolumeDecorators) List(ctx context.Context, opts v1.ListOptions) (result *platform.VolumeDecoratorList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(volumedecoratorsResource, volumedecoratorsKind, opts), &platform.VolumeDecoratorList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &platform.VolumeDecoratorList{ListMeta: obj.(*platform.VolumeDecoratorList).ListMeta}
	for _, item := range obj.(*platform.VolumeDecoratorList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested volumeDecorators.
func (c *FakeVolumeDecorators) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(volumedecoratorsResource, opts))
}

// Create takes the representation of a volumeDecorator and creates it.  Returns the server's representation of the volumeDecorator, and an error, if there is any.
func (c *FakeVolumeDecorators) Create(ctx context.Context, volumeDecorator *platform.VolumeDecorator, opts v1.CreateOptions) (result *platform.VolumeDecorator, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(volumedecoratorsResource, volumeDecorator), &platform.VolumeDecorator{})
	if obj == nil {
		return nil, err
	}
	return obj.(*platform.VolumeDecorator), err
}

// Update takes the representation of a volumeDecorator and updates it. Returns the server's representation of the volumeDecorator, and an error, if there is any.
func (c *FakeVolumeDecorators) Update(ctx context.Context, volumeDecorator *platform.VolumeDecorator, opts v1.UpdateOptions) (result *platform.VolumeDecorator, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(volumedecoratorsResource, volumeDecorator), &platform.VolumeDecorator{})
	if obj == nil {
		return nil, err
	}
	return obj.(*platform.VolumeDecorator), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeVolumeDecorators) UpdateStatus(ctx context.Context, volumeDecorator *platform.VolumeDecorator, opts v1.UpdateOptions) (*platform.VolumeDecorator, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(volumedecoratorsResource, "status", volumeDecorator), &platform.VolumeDecorator{})
	if obj == nil {
		return nil, err
	}
	return obj.(*platform.VolumeDecorator), err
}

// Delete takes name of the volumeDecorator and deletes it. Returns an error if one occurs.
func (c *FakeVolumeDecorators) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(volumedecoratorsResource, name), &platform.VolumeDecorator{})
	return err
}

// Patch applies the patch and returns the patched volumeDecorator.
func (c *FakeVolumeDecorators) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *platform.VolumeDecorator, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(volumedecoratorsResource, name, pt, data, subresources...), &platform.VolumeDecorator{})
	if obj == nil {
		return nil, err
	}
	return obj.(*platform.VolumeDecorator), err
}
