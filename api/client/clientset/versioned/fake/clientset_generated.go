/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
	clientset "tkestack.io/tke/api/client/clientset/versioned"
	applicationv1 "tkestack.io/tke/api/client/clientset/versioned/typed/application/v1"
	fakeapplicationv1 "tkestack.io/tke/api/client/clientset/versioned/typed/application/v1/fake"
	authv1 "tkestack.io/tke/api/client/clientset/versioned/typed/auth/v1"
	fakeauthv1 "tkestack.io/tke/api/client/clientset/versioned/typed/auth/v1/fake"
	businessv1 "tkestack.io/tke/api/client/clientset/versioned/typed/business/v1"
	fakebusinessv1 "tkestack.io/tke/api/client/clientset/versioned/typed/business/v1/fake"
	logagentv1 "tkestack.io/tke/api/client/clientset/versioned/typed/logagent/v1"
	fakelogagentv1 "tkestack.io/tke/api/client/clientset/versioned/typed/logagent/v1/fake"
	monitorv1 "tkestack.io/tke/api/client/clientset/versioned/typed/monitor/v1"
	fakemonitorv1 "tkestack.io/tke/api/client/clientset/versioned/typed/monitor/v1/fake"
	notifyv1 "tkestack.io/tke/api/client/clientset/versioned/typed/notify/v1"
	fakenotifyv1 "tkestack.io/tke/api/client/clientset/versioned/typed/notify/v1/fake"
	platformv1 "tkestack.io/tke/api/client/clientset/versioned/typed/platform/v1"
	fakeplatformv1 "tkestack.io/tke/api/client/clientset/versioned/typed/platform/v1/fake"
	registryv1 "tkestack.io/tke/api/client/clientset/versioned/typed/registry/v1"
	fakeregistryv1 "tkestack.io/tke/api/client/clientset/versioned/typed/registry/v1/fake"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// ApplicationV1 retrieves the ApplicationV1Client
func (c *Clientset) ApplicationV1() applicationv1.ApplicationV1Interface {
	return &fakeapplicationv1.FakeApplicationV1{Fake: &c.Fake}
}

// AuthV1 retrieves the AuthV1Client
func (c *Clientset) AuthV1() authv1.AuthV1Interface {
	return &fakeauthv1.FakeAuthV1{Fake: &c.Fake}
}

// BusinessV1 retrieves the BusinessV1Client
func (c *Clientset) BusinessV1() businessv1.BusinessV1Interface {
	return &fakebusinessv1.FakeBusinessV1{Fake: &c.Fake}
}

// LogagentV1 retrieves the LogagentV1Client
func (c *Clientset) LogagentV1() logagentv1.LogagentV1Interface {
	return &fakelogagentv1.FakeLogagentV1{Fake: &c.Fake}
}

// MonitorV1 retrieves the MonitorV1Client
func (c *Clientset) MonitorV1() monitorv1.MonitorV1Interface {
	return &fakemonitorv1.FakeMonitorV1{Fake: &c.Fake}
}

// NotifyV1 retrieves the NotifyV1Client
func (c *Clientset) NotifyV1() notifyv1.NotifyV1Interface {
	return &fakenotifyv1.FakeNotifyV1{Fake: &c.Fake}
}

// PlatformV1 retrieves the PlatformV1Client
func (c *Clientset) PlatformV1() platformv1.PlatformV1Interface {
	return &fakeplatformv1.FakePlatformV1{Fake: &c.Fake}
}

// RegistryV1 retrieves the RegistryV1Client
func (c *Clientset) RegistryV1() registryv1.RegistryV1Interface {
	return &fakeregistryv1.FakeRegistryV1{Fake: &c.Fake}
}
