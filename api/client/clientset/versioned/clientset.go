/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
	applicationv1 "tkestack.io/tke/api/client/clientset/versioned/typed/application/v1"
	authv1 "tkestack.io/tke/api/client/clientset/versioned/typed/auth/v1"
	businessv1 "tkestack.io/tke/api/client/clientset/versioned/typed/business/v1"
	logagentv1 "tkestack.io/tke/api/client/clientset/versioned/typed/logagent/v1"
	monitorv1 "tkestack.io/tke/api/client/clientset/versioned/typed/monitor/v1"
	notifyv1 "tkestack.io/tke/api/client/clientset/versioned/typed/notify/v1"
	platformv1 "tkestack.io/tke/api/client/clientset/versioned/typed/platform/v1"
	registryv1 "tkestack.io/tke/api/client/clientset/versioned/typed/registry/v1"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ApplicationV1() applicationv1.ApplicationV1Interface
	AuthV1() authv1.AuthV1Interface
	BusinessV1() businessv1.BusinessV1Interface
	LogagentV1() logagentv1.LogagentV1Interface
	MonitorV1() monitorv1.MonitorV1Interface
	NotifyV1() notifyv1.NotifyV1Interface
	PlatformV1() platformv1.PlatformV1Interface
	RegistryV1() registryv1.RegistryV1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	applicationV1 *applicationv1.ApplicationV1Client
	authV1        *authv1.AuthV1Client
	businessV1    *businessv1.BusinessV1Client
	logagentV1    *logagentv1.LogagentV1Client
	monitorV1     *monitorv1.MonitorV1Client
	notifyV1      *notifyv1.NotifyV1Client
	platformV1    *platformv1.PlatformV1Client
	registryV1    *registryv1.RegistryV1Client
}

// ApplicationV1 retrieves the ApplicationV1Client
func (c *Clientset) ApplicationV1() applicationv1.ApplicationV1Interface {
	return c.applicationV1
}

// AuthV1 retrieves the AuthV1Client
func (c *Clientset) AuthV1() authv1.AuthV1Interface {
	return c.authV1
}

// BusinessV1 retrieves the BusinessV1Client
func (c *Clientset) BusinessV1() businessv1.BusinessV1Interface {
	return c.businessV1
}

// LogagentV1 retrieves the LogagentV1Client
func (c *Clientset) LogagentV1() logagentv1.LogagentV1Interface {
	return c.logagentV1
}

// MonitorV1 retrieves the MonitorV1Client
func (c *Clientset) MonitorV1() monitorv1.MonitorV1Interface {
	return c.monitorV1
}

// NotifyV1 retrieves the NotifyV1Client
func (c *Clientset) NotifyV1() notifyv1.NotifyV1Interface {
	return c.notifyV1
}

// PlatformV1 retrieves the PlatformV1Client
func (c *Clientset) PlatformV1() platformv1.PlatformV1Interface {
	return c.platformV1
}

// RegistryV1 retrieves the RegistryV1Client
func (c *Clientset) RegistryV1() registryv1.RegistryV1Interface {
	return c.registryV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.applicationV1, err = applicationv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.authV1, err = authv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.businessV1, err = businessv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.logagentV1, err = logagentv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.monitorV1, err = monitorv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.notifyV1, err = notifyv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.platformV1, err = platformv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.registryV1, err = registryv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.applicationV1 = applicationv1.NewForConfigOrDie(c)
	cs.authV1 = authv1.NewForConfigOrDie(c)
	cs.businessV1 = businessv1.NewForConfigOrDie(c)
	cs.logagentV1 = logagentv1.NewForConfigOrDie(c)
	cs.monitorV1 = monitorv1.NewForConfigOrDie(c)
	cs.notifyV1 = notifyv1.NewForConfigOrDie(c)
	cs.platformV1 = platformv1.NewForConfigOrDie(c)
	cs.registryV1 = registryv1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.applicationV1 = applicationv1.New(c)
	cs.authV1 = authv1.New(c)
	cs.businessV1 = businessv1.New(c)
	cs.logagentV1 = logagentv1.New(c)
	cs.monitorV1 = monitorv1.New(c)
	cs.notifyV1 = notifyv1.New(c)
	cs.platformV1 = platformv1.New(c)
	cs.registryV1 = registryv1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
