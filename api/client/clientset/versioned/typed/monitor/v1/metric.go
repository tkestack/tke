/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
	scheme "tkestack.io/tke/api/client/clientset/versioned/scheme"
	v1 "tkestack.io/tke/api/monitor/v1"
)

// MetricsGetter has a method to return a MetricInterface.
// A group's client should implement this interface.
type MetricsGetter interface {
	Metrics() MetricInterface
}

// MetricInterface has methods to work with Metric resources.
type MetricInterface interface {
	Create(ctx context.Context, metric *v1.Metric, opts metav1.CreateOptions) (*v1.Metric, error)
	MetricExpansion
}

// metrics implements MetricInterface
type metrics struct {
	client rest.Interface
}

// newMetrics returns a Metrics
func newMetrics(c *MonitorV1Client) *metrics {
	return &metrics{
		client: c.RESTClient(),
	}
}

// Create takes the representation of a metric and creates it.  Returns the server's representation of the metric, and an error, if there is any.
func (c *metrics) Create(ctx context.Context, metric *v1.Metric, opts metav1.CreateOptions) (result *v1.Metric, err error) {
	result = &v1.Metric{}
	err = c.client.Post().
		Resource("metrics").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(metric).
		Do(ctx).
		Into(result)
	return
}
