/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tke.api.platform.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// AddonSpec describes the attributes on a Addon.
message AddonSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

message AuthzWebhookAddr {
  // +optional
  optional BuiltinAuthzWebhookAddr builtin = 1;

  // +optional
  optional ExternalAuthzWebhookAddr external = 2;
}

message BuiltinAuthzWebhookAddr {
}

// CSIOperator is a operator to manages CSI external components.
message CSIOperator {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of storage operator.
  // +optional
  optional CSIOperatorSpec spec = 2;

  // +optional
  optional CSIOperatorStatus status = 3;
}

message CSIOperatorFeature {
  optional string version = 1;
}

// CSIOperatorList is the whole list of all storage operators which owned by a tenant.
message CSIOperatorList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of storage operators.
  repeated CSIOperator items = 2;
}

// CSIOperatorSpec describes the attributes of a storage operator.
message CSIOperatorSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  // Version of the CSI operator.
  optional string version = 3;
}

// CSIOperatorStatus is information about the current status of a storage operator.
message CSIOperatorStatus {
  // +optional
  optional string version = 1;

  // StorageVendorVersion will be set to the config version of the storage vendor.
  // +optional
  optional string storageVendorVersion = 2;

  // Phase is the current lifecycle phase of the tapp controller of cluster.
  // +optional
  optional string phase = 3;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 4;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 5;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 6;
}

// CSIProxyOptions is the query options to a kube-apiserver proxy call for CSI crd object.
message CSIProxyOptions {
  optional string namespace = 1;

  optional string name = 2;
}

// Cluster is a Kubernetes cluster in
message Cluster {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional ClusterSpec spec = 2;

  // +optional
  optional ClusterStatus status = 3;
}

// ClusterAddon contains the Addon component for the current kubernetes cluster
message ClusterAddon {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of addons in this set.
  // +optional
  optional ClusterAddonSpec spec = 2;

  // +optional
  optional ClusterAddonStatus status = 3;
}

// ClusterAddonList is the whole list of all ClusterAddon.
message ClusterAddonList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of ClusterAddon
  repeated ClusterAddon items = 2;
}

// ClusterAddonSpec indicates the specifications of the ClusterAddon.
message ClusterAddonSpec {
  // Addon type, one of Helm, PersistentEvent or LogCollector etc.
  optional string type = 1;

  // AddonLevel is level of cluster addon.
  optional string level = 2;

  // Version
  optional string version = 3;
}

// ClusterAddonStatus is information about the current status of a ClusterAddon.
message ClusterAddonStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the addon of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;
}

// ClusterAddonType records the all addons of cluster available.
message ClusterAddonType {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Addon type, one of Helm, PersistentEvent or LogCollector etc.
  optional string type = 2;

  // AddonLevel is level of cluster addon.
  optional string level = 3;

  // LatestVersion is latest version of the addon.
  optional string latestVersion = 4;

  // Description is desc of the addon.
  optional string description = 5;

  repeated string compatibleClusterType = 6;
}

// ClusterAddonTypeList is a resource containing a list of ClusterAddonType objects.
message ClusterAddonTypeList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // +optional
  repeated ClusterAddonType items = 2;
}

// ClusterAddress contains information for the cluster's address.
message ClusterAddress {
  // Cluster address type, one of Public, ExternalIP or InternalIP.
  optional string type = 1;

  // The cluster address.
  optional string host = 2;

  optional int32 port = 3;

  optional string path = 4;
}

// ClusterApplyOptions is the query options to a kube-apiserver proxy call for cluster object.
message ClusterApplyOptions {
  // +optional
  optional bool notUpdate = 1;
}

// ClusterComponent records the number of copies of each component of the
// cluster master.
message ClusterComponent {
  optional string type = 1;

  optional ClusterComponentReplicas replicas = 2;
}

// ClusterComponentReplicas records the number of copies of each state of each
// component of the cluster master.
message ClusterComponentReplicas {
  optional int32 desired = 1;

  optional int32 current = 2;

  optional int32 available = 3;

  optional int32 updated = 4;
}

// ClusterCondition contains details for the current condition of this cluster.
message ClusterCondition {
  // Type is the type of the condition.
  optional string type = 1;

  // Status is the status of the condition.
  // Can be True, False, Unknown.
  optional string status = 2;

  // Last time we probed the condition.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // Unique, one-word, CamelCase reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human-readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

// ClusterCredential records the credential information needed to access the cluster.
message ClusterCredential {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional string tenantID = 2;

  optional string clusterName = 3;

  // For TKE in global reuse
  // +optional
  optional bytes etcdCACert = 4;

  // +optional
  optional bytes etcdCAKey = 5;

  // +optional
  optional bytes etcdAPIClientCert = 6;

  // +optional
  optional bytes etcdAPIClientKey = 7;

  // For connect the cluster
  // +optional
  optional bytes caCert = 8;

  // +optional
  optional bytes caKey = 9;

  // For kube-apiserver X509 auth
  // +optional
  optional bytes clientCert = 10;

  // For kube-apiserver X509 auth
  // +optional
  optional bytes clientKey = 11;

  // For kube-apiserver token auth
  // +optional
  optional string token = 12;

  // For kubeadm init or join
  // +optional
  optional string bootstrapToken = 13;

  // For kubeadm init or join
  // +optional
  optional string certificateKey = 14;
}

// ClusterCredentialList is the whole list of all ClusterCredential which owned by a tenant.
message ClusterCredentialList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of clusters
  repeated ClusterCredential items = 2;
}

// ClusterFeature records the features that are enabled by the cluster.
message ClusterFeature {
  // +optional
  optional bool ipvs = 1;

  // +optional
  optional bool publicLB = 2;

  // +optional
  optional bool internalLB = 3;

  // +optional
  optional string gpuType = 4;

  // +optional
  optional bool enableMasterSchedule = 5;

  // +optional
  optional HA ha = 6;

  // +optional
  repeated string skipConditions = 7;

  // +optional
  repeated File files = 8;

  // +optional
  map<string, string> hooks = 9;

  // +optional
  optional CSIOperatorFeature csiOperator = 10;

  // For kube-apiserver authorization webhook
  // +optional
  optional AuthzWebhookAddr authzWebhookAddr = 11;
}

// ClusterList is the whole list of all clusters which owned by a tenant.
message ClusterList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of clusters
  repeated Cluster items = 2;
}

// ClusterMachine is the master machine definition of cluster.
message ClusterMachine {
  optional string ip = 1;

  optional int32 port = 2;

  optional string username = 3;

  // +optional
  optional bytes password = 4;

  // +optional
  optional bytes privateKey = 5;

  // +optional
  optional bytes passPhrase = 6;

  // +optional
  map<string, string> labels = 7;

  // If specified, the node's taints.
  // +optional
  repeated k8s.io.api.core.v1.Taint taints = 8;
}

// ClusterProperty records the attribute information of the cluster.
message ClusterProperty {
  // +optional
  optional int32 maxClusterServiceNum = 1;

  // +optional
  optional int32 maxNodePodNum = 2;

  // +optional
  map<string, string> oversoldRatio = 3;
}

// ClusterResource records the current available and maximum resource quota
// information for the cluster.
message ClusterResource {
  // Capacity represents the total resources of a cluster.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> capacity = 1;

  // Allocatable represents the resources of a cluster that are available for scheduling.
  // Defaults to Capacity.
  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocatable = 2;

  // +optional
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> allocated = 3;
}

// ClusterSpec is a description of a cluster.
message ClusterSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string tenantID = 2;

  // +optional
  optional string displayName = 3;

  optional string type = 4;

  optional string version = 5;

  // +optional
  optional string networkType = 6;

  // +optional
  optional string networkDevice = 7;

  // +optional
  optional string clusterCIDR = 8;

  // ServiceCIDR is used to set a separated CIDR for k8s service, it's exclusive with MaxClusterServiceNum.
  // +optional
  optional string serviceCIDR = 19;

  // DNSDomain is the dns domain used by k8s services. Defaults to "cluster.local".
  optional string dnsDomain = 9;

  // +optional
  repeated string publicAlternativeNames = 10;

  // +optional
  optional ClusterFeature features = 11;

  // +optional
  optional ClusterProperty properties = 12;

  // +optional
  repeated ClusterMachine addresses = 13;

  // +optional
  map<string, string> dockerExtraArgs = 14;

  // +optional
  map<string, string> kubeletExtraArgs = 15;

  // +optional
  map<string, string> apiServerExtraArgs = 16;

  // +optional
  map<string, string> controllerManagerExtraArgs = 17;

  // +optional
  map<string, string> schedulerExtraArgs = 18;

  // ClusterCredentialRef for isolate sensitive information.
  // If not specified, cluster controller will create one;
  // If specified, provider must make sure is valid.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference clusterCredentialRef = 20;

  // Etcd holds configuration for etcd.
  // +optional
  optional Etcd etcd = 21;

  // Upgrade control upgrade process.
  // +optional
  optional Upgrade upgrade = 22;
}

// ClusterStatus represents information about the status of a cluster.
message ClusterStatus {
  // +optional
  optional bool locked = 1;

  // +optional
  optional string version = 2;

  // +optional
  optional string phase = 3;

  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ClusterCondition conditions = 4;

  // A human readable message indicating details about why the cluster is in this condition.
  // +optional
  optional string message = 5;

  // A brief CamelCase message indicating details about why the cluster is in this state.
  // +optional
  optional string reason = 6;

  // List of addresses reachable to the cluster.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ClusterAddress addresses = 7;

  // +optional
  optional ClusterResource resource = 9;

  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ClusterComponent components = 10;

  // +optional
  optional string serviceCIDR = 11;

  // +optional
  optional int32 nodeCIDRMaskSize = 12;

  // +optional
  optional string dnsIP = 13;

  // +optional
  repeated string registryIPs = 14;
}

// ConfigMap holds configuration data for tke to consume.
message ConfigMap {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Data contains the configuration data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // Values with non-UTF-8 byte sequences must use the BinaryData field.
  // The keys stored in Data must not overlap with the keys in
  // the BinaryData field, this is enforced during validation process.
  // +optional
  map<string, string> data = 2;

  // BinaryData contains the binary data.
  // Each key must consist of alphanumeric characters, '-', '_' or '.'.
  // BinaryData can contain byte sequences that are not in the UTF-8 range.
  // The keys stored in BinaryData must not overlap with the ones in
  // the Data field, this is enforced during validation process.
  // +optional
  map<string, bytes> binaryData = 3;
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
message ConfigMapList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ConfigMaps.
  repeated ConfigMap items = 2;
}

// CronHPA is a new kubernetes workload.
message CronHPA {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of CronHPA.
  // +optional
  optional CronHPASpec spec = 2;

  // +optional
  optional CronHPAStatus status = 3;
}

// CronHPAList is the whole list of all CronHPAs which owned by a tenant.
message CronHPAList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of CronHPAs
  repeated CronHPA items = 2;
}

// CronHPAProxyOptions is the query options to a kube-apiserver proxy call.
message CronHPAProxyOptions {
  optional string namespace = 1;

  optional string name = 2;
}

// CronHPASpec describes the attributes on a CronHPA.
message CronHPASpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// CronHPAStatus is information about the current status of a CronHPA.
message CronHPAStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the CronHPA of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// Etcd contains elements describing Etcd configuration.
message Etcd {
  // Local provides configuration knobs for configuring the local etcd instance
  // Local and External are mutually exclusive
  optional LocalEtcd local = 1;

  // External describes how to connect to an external etcd cluster
  // Local and External are mutually exclusive
  optional ExternalEtcd external = 2;
}

message ExternalAuthzWebhookAddr {
  optional string ip = 1;

  optional int32 port = 2;
}

// ExternalEtcd describes an external etcd cluster.
// Kubeadm has no knowledge of where certificate files live and they must be supplied.
message ExternalEtcd {
  // Endpoints of etcd members. Required for ExternalEtcd.
  repeated string endpoints = 1;

  // CAFile is an SSL Certificate Authority file used to secure etcd communication.
  // Required if using a TLS connection.
  optional string caFile = 2;

  // CertFile is an SSL certification file used to secure etcd communication.
  // Required if using a TLS connection.
  optional string certFile = 3;

  // KeyFile is an SSL key file used to secure etcd communication.
  // Required if using a TLS connection.
  optional string keyFile = 4;
}

message File {
  optional string src = 1;

  // Only support regular file
  optional string dst = 2;
}

message HA {
  optional TKEHA tke = 1;

  optional ThirdPartyHA thirdParty = 2;
}

// Helm is a kubernetes package manager.
message Helm {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional HelmSpec spec = 2;

  // +optional
  optional HelmStatus status = 3;
}

// HelmList is the whole list of all helms which owned by a tenant.
message HelmList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Helms
  repeated Helm items = 2;
}

// HelmProxyOptions is the query options to a Helm-api proxy call.
message HelmProxyOptions {
  // Path is the URL path to use for the current proxy request to helm-api.
  // +optional
  optional string path = 1;
}

// HelmSpec describes the attributes on a Helm.
message HelmSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// HelmStatus is information about the current status of a Helm.
message HelmStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the helm of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// IPAM is a scheduler plugin for assigning IP.
message IPAM {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional IPAMSpec spec = 2;

  // +optional
  optional IPAMStatus status = 3;
}

// IPAMList is the whole list of all IPAMs which owned by a tenant.
message IPAMList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of IPAMs
  repeated IPAM items = 2;
}

// IPAMProxyOptions is the query options to a ipam-api proxy call.
message IPAMProxyOptions {
  // Path is the URL path to use for the current proxy request to ipam-api.
  // +optional
  optional string path = 1;
}

// IPAMSpec describes the attributes on a IPAM.
message IPAMSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// IPAMStatus is information about the current status of a IPAM.
message IPAMStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the addon of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// LBCF is a kubernetes load balancer manager.
message LBCF {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional LBCFSpec spec = 2;

  // +optional
  optional LBCFStatus status = 3;
}

// LBCFList is the whole list of all helms which owned by a tenant.
message LBCFList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of LBCFs
  repeated LBCF items = 2;
}

// LBCFProxyOptions is the query options to a kube-apiserver proxy call.
message LBCFProxyOptions {
  optional string namespace = 1;

  optional string name = 2;

  optional string action = 3;
}

// LBCFSpec describes the attributes on a Helm.
message LBCFSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// LBCFStatus is information about the current status of a Helm.
message LBCFStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the helm of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// LocalEtcd describes that kubeadm should run an etcd cluster locally
message LocalEtcd {
  // DataDir is the directory etcd will place its data.
  // Defaults to "/var/lib/etcd".
  optional string dataDir = 1;

  // ExtraArgs are extra arguments provided to the etcd binary
  // when run inside a static pod.
  map<string, string> extraArgs = 2;

  // ServerCertSANs sets extra Subject Alternative Names for the etcd server signing cert.
  repeated string serverCertSANs = 3;

  // PeerCertSANs sets extra Subject Alternative Names for the etcd peer signing cert.
  repeated string peerCertSANs = 4;
}

// LogCollector is a manager to collect logs of workload.
message LogCollector {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of LogCollector.
  // +optional
  optional LogCollectorSpec spec = 2;

  // +optional
  optional LogCollectorStatus status = 3;
}

// LogCollectorList is the whole list of all LogCollector which owned by a tenant.
message LogCollectorList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of volume decorators.
  repeated LogCollector items = 2;
}

// LogCollectorProxyOptions is the query options to a kube-apiserver proxy call for LogCollector crd object.
message LogCollectorProxyOptions {
  optional string namespace = 1;

  optional string name = 2;
}

// LogCollectorSpec describes the attributes of a LogCollector.
message LogCollectorSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// LogCollectorStatus is information about the current status of a LogCollector.
message LogCollectorStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the LogCollector of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// Machine instance in Kubernetes cluster
message Machine {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of the Machine.
  // +optional
  optional MachineSpec spec = 2;

  // +optional
  optional MachineStatus status = 3;
}

// MachineAddress contains information for the machine's address.
message MachineAddress {
  // Machine address type, one of Public, ExternalIP or InternalIP.
  optional string type = 1;

  // The machine address.
  optional string address = 2;
}

// MachineCondition contains details for the current condition of this Machine.
message MachineCondition {
  // Type is the type of the condition.
  optional string type = 1;

  // Status is the status of the condition.
  // Can be True, False, Unknown.
  optional string status = 2;

  // Last time we probed the condition.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

  // Last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // Unique, one-word, CamelCase reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human-readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

// MachineList is the whole list of all machine in an cluster.
message MachineList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of clusters
  repeated Machine items = 2;
}

// MachineSpec is a description of machine.
message MachineSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage.
  // +optional
  repeated string finalizers = 1;

  optional string tenantID = 2;

  optional string clusterName = 3;

  optional string type = 4;

  optional string ip = 5;

  optional int32 port = 6;

  optional string username = 7;

  // +optional
  optional bytes password = 8;

  // +optional
  optional bytes privateKey = 9;

  // +optional
  optional bytes passPhrase = 10;

  // +optional
  map<string, string> labels = 11;

  // If specified, the node's taints.
  // +optional
  repeated k8s.io.api.core.v1.Taint taints = 12;
}

// MachineStatus represents information about the status of an machine.
message MachineStatus {
  // +optional
  optional bool locked = 1;

  // +optional
  optional string phase = 2;

  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated MachineCondition conditions = 3;

  // A human readable message indicating details about why the machine is in this condition.
  // +optional
  optional string message = 4;

  // A brief CamelCase message indicating details about why the machine is in this state.
  // +optional
  optional string reason = 5;

  // List of addresses reachable to the machine.
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated MachineAddress addresses = 6;

  // Set of ids/uuids to uniquely identify the node.
  // +optional
  optional MachineSystemInfo machineInfo = 7;
}

// MachineSystemInfo is a set of ids/uuids to uniquely identify the node.
message MachineSystemInfo {
  // MachineID reported by the node. For unique machine identification
  // in the cluster this field is preferred. Learn more from man(5)
  // machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
  optional string machineID = 1;

  // SystemUUID reported by the node. For unique machine identification
  // MachineID is preferred. This field is specific to Red Hat hosts
  // https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
  optional string systemUUID = 2;

  // Boot ID reported by the node.
  optional string bootID = 3;

  // Kernel Version reported by the node.
  optional string kernelVersion = 4;

  // OS Image reported by the node.
  optional string osImage = 5;

  // ContainerRuntime Version reported by the node.
  optional string containerRuntimeVersion = 6;

  // Kubelet Version reported by the node.
  optional string kubeletVersion = 7;

  // KubeProxy Version reported by the node.
  optional string kubeProxyVersion = 8;

  // The Operating System reported by the node
  optional string operatingSystem = 9;

  // The Architecture reported by the node
  optional string architecture = 10;
}

// PVCRProxyOptions is the query options to a kube-apiserver proxy call for PVCR crd object.
message PVCRProxyOptions {
  optional string namespace = 1;

  optional string name = 2;
}

// PersistentBackEnd indicates the backend type and attributes of the persistent
// log store.
message PersistentBackEnd {
  optional StorageBackEndCLS cls = 1;

  optional StorageBackEndES es = 2;
}

// PersistentEvent is a recorder of kubernetes event.
message PersistentEvent {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional PersistentEventSpec spec = 2;

  // +optional
  optional PersistentEventStatus status = 3;
}

// PersistentEventList is the whole list of all clusters which owned by a tenant.
message PersistentEventList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of PersistentEvents
  repeated PersistentEvent items = 2;
}

// PersistentEventSpec describes the attributes on a PersistentEvent.
message PersistentEventSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional PersistentBackEnd persistentBackEnd = 3;

  optional string version = 4;
}

// PersistentEventStatus is information about the current status of a
// PersistentEvent.
message PersistentEventStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the persistent event of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

// Prometheus is a kubernetes package manager.
message Prometheus {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of clusters in this set.
  // +optional
  optional PrometheusSpec spec = 2;

  // +optional
  optional PrometheusStatus status = 3;
}

// PrometheusList is the whole list of all prometheus which owned by a tenant.
message PrometheusList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of Prometheuss
  repeated Prometheus items = 2;
}

// PrometheusRemoteAddr is the remote write/read address for prometheus
message PrometheusRemoteAddr {
  repeated string writeAddr = 1;

  repeated string readAddr = 2;
}

// PrometheusSpec describes the attributes on a Prometheus.
message PrometheusSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;

  // SubVersion is the components version such as node-exporter.
  map<string, string> subVersion = 4;

  // RemoteAddress is the remote address for prometheus when writing/reading outside of cluster.
  optional PrometheusRemoteAddr remoteAddress = 5;

  // +optional
  // NotifyWebhook is the address that alert messages send to, optional. If not set, a default webhook address "https://[notify-api-address]/webhook" will be used.
  optional string notifyWebhook = 6;

  // +optional
  // Resources is the resource request and limit for prometheus
  optional ResourceRequirements resources = 7;

  // +optional
  // RunOnMaster indicates whether to add master Affinity for all monitor components or not
  optional bool runOnMaster = 8;

  // +optional
  // AlertRepeatInterval indicates repeat interval of alerts
  optional string alertRepeatInterval = 9;

  // +optional
  // WithNPD indicates whether to deploy node-problem-detector or not
  optional bool withNPD = 10;
}

// PrometheusStatus is information about the current status of a Prometheus.
message PrometheusStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the helm of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;

  // SubVersion is the components version such as node-exporter.
  map<string, string> subVersion = 6;
}

// Registry records the third-party image repository information stored by the
// user.
message Registry {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional RegistrySpec spec = 2;
}

// RegistryList is a resource containing a list of Registry objects.
message RegistryList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // +optional
  repeated Registry items = 2;
}

// RegistrySpec indicates the specifications of the third-party image repository.
message RegistrySpec {
  // +optional
  optional string tenantID = 1;

  // +optional
  optional string displayName = 2;

  // +optional
  optional string clusterName = 3;

  // +optional
  optional string url = 4;

  // +optional
  optional string userName = 5;

  // +optional
  optional string password = 6;
}

// ResourceRequirements describes the compute resource requirements.
message ResourceRequirements {
  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> limits = 1;

  map<string, k8s.io.apimachinery.pkg.api.resource.Quantity> requests = 2;
}

// StorageBackEndCLS records the attributes required when the backend storage
// type is CLS.
message StorageBackEndCLS {
  optional string logSetID = 1;

  optional string topicID = 2;
}

// StorageBackEndES records the attributes required when the backend storage
// type is ElasticSearch.
message StorageBackEndES {
  optional string ip = 1;

  optional int32 port = 2;

  optional string scheme = 3;

  optional string indexName = 4;
}

message TKEHA {
  optional string vip = 1;
}

// TappController is a new kubernetes workload.
message TappController {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of tapp controller.
  // +optional
  optional TappControllerSpec spec = 2;

  // +optional
  optional TappControllerStatus status = 3;
}

// TappControllerList is the whole list of all tapp controllers which owned by a tenant.
message TappControllerList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of tapp controllers
  repeated TappController items = 2;
}

// TappControllerProxyOptions is the query options to a kube-apiserver proxy call.
message TappControllerProxyOptions {
  optional string namespace = 1;

  optional string name = 2;

  optional string action = 3;
}

// TappControllerSpec describes the attributes on a tapp controller.
message TappControllerSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;
}

// TappControllerStatus is information about the current status of a tapp controller.
message TappControllerStatus {
  // +optional
  optional string version = 1;

  // Phase is the current lifecycle phase of the tapp controller of cluster.
  // +optional
  optional string phase = 2;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 3;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 4;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 5;
}

message ThirdPartyHA {
  optional string vip = 1;

  optional int32 vport = 2;
}

message Upgrade {
  // Upgrade mode, default value is Auto.
  // +optional
  optional string mode = 1;

  // Upgrade strategy config.
  // +optional
  optional UpgradeStrategy strategy = 2;
}

// UpgradeStrategy used to control the upgrade process.
message UpgradeStrategy {
  // The maximum number of pods that can be unready during the upgrade.
  // 0% means all pods need to be ready after evition.
  // 100% means ignore any pods unready which may be used in one worker node, use this carefully!
  // default value is 0%.
  // +optional
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnready = 1;
}

// VolumeDecorator is a controller to manage PVC information.
message VolumeDecorator {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of volume decorator.
  // +optional
  optional VolumeDecoratorSpec spec = 2;

  // +optional
  optional VolumeDecoratorStatus status = 3;
}

// VolumeDecoratorList is the whole list of all VolumeDecorator which owned by a tenant.
message VolumeDecoratorList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of volume decorators.
  repeated VolumeDecorator items = 2;
}

// VolumeDecoratorSpec describes the attributes of a VolumeDecorator.
message VolumeDecoratorSpec {
  optional string tenantID = 1;

  optional string clusterName = 2;

  optional string version = 3;

  repeated string volumeTypes = 4;

  optional bool workloadAdmission = 5;
}

// VolumeDecoratorStatus is information about the current status of a VolumeDecorator.
message VolumeDecoratorStatus {
  // +optional
  optional string version = 1;

  // VolumeTypes is the supported volume types in this cluster.
  // +optional
  repeated string volumeTypes = 2;

  // WorkloadAdmission will be true to enable the workload admission webhook.
  // +optional
  optional bool workloadAdmission = 3;

  // StorageVendorVersion will be set to the config version of the storage vendor.
  // +optional
  optional string storageVendorVersion = 4;

  // Phase is the current lifecycle phase of the volume decorator of cluster.
  // +optional
  optional string phase = 5;

  // Reason is a brief CamelCase string that describes any failure.
  // +optional
  optional string reason = 6;

  // RetryCount is a int between 0 and 5 that describes the time of retrying initializing.
  // +optional
  optional int32 retryCount = 7;

  // LastReInitializingTimestamp is a timestamp that describes the last time of retrying initializing.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastReInitializingTimestamp = 8;
}

